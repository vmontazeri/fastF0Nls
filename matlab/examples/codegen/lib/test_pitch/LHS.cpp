/*
 * Academic License - for use in teaching, academic research, and meeting
 * course requirements at degree granting institutions only.  Not for
 * government, commercial, or other organizational use.
 *
 * LHS.cpp
 *
 * Code generation for function 'LHS'
 *
 */

/* Include files */
#include "LHS.h"
#include "SRH.h"
#include "fft.h"
#include "getCandidates.h"
#include "rt_nonfinite.h"
#include "test_pitch.h"
#include "test_pitch_rtwutil.h"
#include <cmath>
#include <cstring>

/* Function Definitions */
void LHS(const double y[4080], double f0[17])
{
  int jtilecol;
  int ibtile;
  double b[4080];
  static const double a[240] = { 0.080000000000000016, 0.0801576305112437,
    0.080630414012896057, 0.081418026482761141, 0.082519928130594278,
    0.083935363768047222, 0.085663363326236641, 0.087702742520580912,
    0.090052103662449423, 0.092709836617068775, 0.095674119907028565,
    0.0989429219606312, 0.10251400250422937, 0.10638491409759793,
    0.11055300381128724, 0.11501541504480811, 0.11976908948440362,
    0.12481076919906414, 0.13013699887335078, 0.13574412817549592,
    0.14162831425915823, 0.14778552439711756, 0.15421153874510496,
    0.16090195323387285, 0.16785218258752421, 0.17505746346603185,
    0.18251285772979348, 0.19021325582398579, 0.19815338028039869,
    0.20632778933434764, 0.21473088065418816, 0.22335689518087321,
    0.23219992107492521, 0.24125389776811557, 0.25051262011707476,
    0.25996974265598854, 0.2696187839454624, 0.27945313101457692,
    0.2894660438930875, 0.29965066023066356, 0.30999999999999994,
    0.32050697028058017, 0.33116437011980848, 0.3419648954681842,
    0.35290114418513185, 0.36396562111205871, 0.375150743209162,
    0.38644884475246544, 0.39785218258752419, 0.40935294143619555,
    0.4209432392528405, 0.43261513262628348, 0.44436062222383077,
    0.45617165827361211, 0.4680401460814938, 0.47995795157877624,
    0.49191690689687945, 0.50390881596519133, 0.51592546012824581,
    0.52795860377837833, 0.54, 0.55204139622162163, 0.56407453987175415,
    0.57609118403480863, 0.58808309310312057, 0.60004204842122366,
    0.61195985391850627, 0.6238283417263879, 0.63563937777616919,
    0.64738486737371637, 0.65905676074715958, 0.67064705856380447,
    0.68214781741247577, 0.69355115524753463, 0.70484925679083821,
    0.7160343788879413, 0.72709885581486811, 0.73803510453181587,
    0.74883562988019159, 0.7594930297194199, 0.76999999999999991,
    0.78034933976933651, 0.79053395610691246, 0.800546868985423,
    0.81038121605453761, 0.82003025734401147, 0.8294873798829252,
    0.8387461022318845, 0.8478000789250747, 0.856643104819127,
    0.86526911934581185, 0.87367221066565226, 0.88184661971960143,
    0.88978674417601422, 0.89748714227020665, 0.90494253653396817,
    0.91214781741247575, 0.91909804676612727, 0.925788461254895,
    0.93221447560288251, 0.93837168574084184, 0.9442558718245041,
    0.94986300112664923, 0.95518923080093576, 0.9602309105155965,
    0.9649845849551919, 0.96944699618871288, 0.9736150859024022,
    0.9774859974957707, 0.98105707803936881, 0.98432588009297151,
    0.9872901633829313, 0.98994789633755065, 0.9922972574794191,
    0.99433663667376337, 0.99606463623195285, 0.99748007186940579,
    0.998581973517239, 0.999369585987104, 0.99984236948875638, 1.0,
    0.99984236948875638, 0.999369585987104, 0.998581973517239,
    0.99748007186940579, 0.99606463623195285, 0.99433663667376337,
    0.9922972574794191, 0.98994789633755065, 0.9872901633829313,
    0.98432588009297151, 0.98105707803936881, 0.9774859974957707,
    0.9736150859024022, 0.96944699618871288, 0.9649845849551919,
    0.9602309105155965, 0.95518923080093576, 0.94986300112664923,
    0.9442558718245041, 0.93837168574084184, 0.93221447560288251,
    0.925788461254895, 0.91909804676612727, 0.91214781741247575,
    0.90494253653396817, 0.89748714227020665, 0.88978674417601422,
    0.88184661971960143, 0.87367221066565226, 0.86526911934581185,
    0.856643104819127, 0.8478000789250747, 0.8387461022318845,
    0.8294873798829252, 0.82003025734401147, 0.81038121605453761,
    0.800546868985423, 0.79053395610691246, 0.78034933976933651,
    0.76999999999999991, 0.7594930297194199, 0.74883562988019159,
    0.73803510453181587, 0.72709885581486811, 0.7160343788879413,
    0.70484925679083821, 0.69355115524753463, 0.68214781741247577,
    0.67064705856380447, 0.65905676074715958, 0.64738486737371637,
    0.63563937777616919, 0.6238283417263879, 0.61195985391850627,
    0.60004204842122366, 0.58808309310312057, 0.57609118403480863,
    0.56407453987175415, 0.55204139622162163, 0.54, 0.52795860377837833,
    0.51592546012824581, 0.50390881596519133, 0.49191690689687945,
    0.47995795157877624, 0.4680401460814938, 0.45617165827361211,
    0.44436062222383077, 0.43261513262628348, 0.4209432392528405,
    0.40935294143619555, 0.39785218258752419, 0.38644884475246544,
    0.375150743209162, 0.36396562111205871, 0.35290114418513185,
    0.3419648954681842, 0.33116437011980848, 0.32050697028058017,
    0.30999999999999994, 0.29965066023066356, 0.2894660438930875,
    0.27945313101457692, 0.2696187839454624, 0.25996974265598854,
    0.25051262011707476, 0.24125389776811557, 0.23219992107492521,
    0.22335689518087321, 0.21473088065418816, 0.20632778933434764,
    0.19815338028039869, 0.19021325582398579, 0.18251285772979348,
    0.17505746346603185, 0.16785218258752421, 0.16090195323387285,
    0.15421153874510496, 0.14778552439711756, 0.14162831425915823,
    0.13574412817549592, 0.13013699887335078, 0.12481076919906414,
    0.11976908948440362, 0.11501541504480811, 0.11055300381128724,
    0.10638491409759793, 0.10251400250422937, 0.0989429219606312,
    0.095674119907028565, 0.092709836617068775, 0.090052103662449423,
    0.087702742520580912, 0.085663363326236641, 0.083935363768047222,
    0.082519928130594278, 0.081418026482761141, 0.080630414012896057,
    0.0801576305112437 };

  static creal_T x[136000];
  static double S[136000];
  double b_S[6817];
  double peaks[17];
  for (jtilecol = 0; jtilecol < 17; jtilecol++) {
    ibtile = jtilecol * 240;
    std::memcpy(&b[ibtile], &a[0], 240U * sizeof(double));
  }

  for (jtilecol = 0; jtilecol < 4080; jtilecol++) {
    b[jtilecol] *= y[jtilecol];
  }

  fft(b, x);
  for (jtilecol = 0; jtilecol < 136000; jtilecol++) {
    S[jtilecol] = std::log(rt_hypotd_snf(x[jtilecol].re, x[jtilecol].im));
  }

  for (jtilecol = 0; jtilecol < 17; jtilecol++) {
    for (ibtile = 0; ibtile < 401; ibtile++) {
      b_S[ibtile + 401 * jtilecol] = (((S[ibtile + 8000 * jtilecol] + S[(ibtile <<
        1) + 8000 * jtilecol]) + S[3 * ibtile + 8000 * jtilecol]) + S[(ibtile <<
        2) + 8000 * jtilecol]) + S[5 * ibtile + 8000 * jtilecol];
    }
  }

  getCandidates(b_S, peaks, f0);
}

/* End of code generation (LHS.cpp) */
